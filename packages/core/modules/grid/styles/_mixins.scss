@mixin ngx-grid() {
  display: block;

  $_breakpoints: map-keys($ngx-grid-breakpoints);
  $_gutter: null;
  $_prev-gutter: null;
  @each $_breakpoint in $_breakpoints {
    $_gutter: map-get($ngx-grid-gutter-widths, $_breakpoint);

    @if $_prev-gutter != $_gutter {
      @include ngx-media-breakpoint-up($_breakpoint, $ngx-grid-breakpoints) {
        padding-right: $_gutter / 2;
        padding-left:  $_gutter / 2;
      }

      $_prev-gutter:  $_gutter;
    }
  }
}

@mixin ngx-grid-row() {
  display: flex;
  flex-wrap: wrap;

  $_breakpoints: map-keys($ngx-grid-breakpoints);
  $_gutter: null;
  $_prev-gutter: null;
  @each $_breakpoint in $_breakpoints {
    .ngx-GridComponent__GridRowComponent_align-vertical_#{$_breakpoint}-start {
      align-items: flex-start;
    }
    .ngx-GridComponent__GridRowComponent_align-vertical_#{$_breakpoint}-center {
      align-items: center;
    }
    .ngx-GridComponent__GridRowComponent_align-vertical_#{$_breakpoint}-end {
      align-items: flex-end;
    }

    .ngx-GridComponent__GridRowComponent_align-horizontal_#{$_breakpoint}-start {
      justify-content: flex-start
    }
    .ngx-GridComponent__GridRowComponent_align-horizontal_#{$_breakpoint}-center {
      justify-content: center;
    }
    .ngx-GridComponent__GridRowComponent_align-horizontal_#{$_breakpoint}-end {
      justify-content: flex-end;
    }
    .ngx-GridComponent__GridRowComponent_align-horizontal_#{$_breakpoint}-around {
      justify-content: space-around;
    }
    .ngx-GridComponent__GridRowComponent_align-horizontal_#{$_breakpoint}-between {
      justify-content: space-between;
    }

    $_gutter: map-get($ngx-grid-gutter-widths, $_breakpoint);

    @if $_prev-gutter != $_gutter {
      @include ngx-media-breakpoint-up($_breakpoint, $ngx-grid-breakpoints) {
        margin-right: $_gutter / -2;
        margin-left:  $_gutter / -2;
      }

      $_prev-gutter:  $_gutter;
    }
  }
}

@mixin ngx-grid-column($size) {
  flex: 0 0 percentage($size / $ngx-grid-columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $ngx-grid-columns);
}

@mixin ngx-grid-column-offset($size) {
  margin-left: percentage($size / $ngx-grid-columns);
}

@mixin ngx-grid-column-push($size) {
  left: if($size > 0, percentage($size / $ngx-grid-columns), auto);
}

@mixin ngx-grid-column-pull($size) {
  right: if($size > 0, percentage($size / $ngx-grid-columns), auto);
}

@mixin ngx-grid-column-modifier($type, $size) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include ngx-grid-column-push($size);
  }
  @else if $type == pull {
    @include ngx-grid-column-pull($size);
  }
  @else if $type == offset {
    @include ngx-grid-column-offset($size);
  }
}

@mixin ngx-grid-columns() {
  $_breakpoints: map-keys($ngx-grid-breakpoints);

  %_ngx-grid-column-base {
    position: relative;
    width: 100%;
    // Prevent columns from collapsing when empty
    min-height: 1px;

    $_gutter: null;
    $_prev-gutter: null;
    @each $_breakpoint in $_breakpoints {
      $_gutter: map-get($ngx-grid-gutter-widths, $_breakpoint);

      @if $_prev-gutter != $_gutter {
        @include ngx-media-breakpoint-up($_breakpoint, $ngx-grid-breakpoints) {
          padding-right: $_gutter / 2;
          padding-left:  $_gutter / 2;
        }

        $_prev-gutter:  $_gutter;
      }
    }
  }

  @each $_breakpoint in $_breakpoints {
    .ngx-GridComponent__GridColumnComponent_align_#{$_breakpoint}-start {
      align-self: flex-start;
    }
    .ngx-GridComponent__GridColumnComponent_align_#{$_breakpoint}-center {
      align-self: center;
    }
    .ngx-GridComponent__GridColumnComponent_align_#{$_breakpoint}-end {
      align-self: flex-end;
    }
    // Allow columns to stretch full width below their breakpoints
    @for $_size from 1 through $ngx-grid-columns {
      .ngx-GridComponent__GridColumnComponent_size_#{$_breakpoint}-#{$_size} {
        @extend %_ngx-grid-column-base;
      }
    }
    .ngx-GridComponent__GridColumnComponent_size_#{$_breakpoint} {
      @extend %_ngx-grid-column-base;
    }

    @include ngx-media-breakpoint-up($_breakpoint, $ngx-grid-breakpoints) {
      // Provide basic classes for equal-width flexbox columns
      .ngx-GridComponent__GridColumnComponent_size_#{$_breakpoint} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .ngx-GridComponent__GridColumnComponent_size_#{$_breakpoint}-auto {
        flex: 0 0 auto;
        width: auto;
      }

      @for $_size from 1 through $ngx-grid-columns {
        .ngx-GridComponent__GridColumnComponent_size_#{$_breakpoint}-#{$_size} {
          @include ngx-grid-column($_size);
        }
      }

      @for $_order from 1 through $ngx-grid-columns {
        .ngx-GridComponent__GridColumnComponent_order_#{$_breakpoint}-#{$_order} {
          order: $_order;
        }
      }

      @each $_modifier in (pull, push) {
        @for $_size from 0 through $ngx-grid-columns {
          .ngx-GridComponent__GridColumnComponent_#{$_modifier}_#{$_breakpoint}-#{$_size} {
            @include ngx-grid-column-modifier($_modifier, $_size);
          }
        }
      }
      // offsetting by the width of an entire row isn't possible
      @for $_size from 0 through ($ngx-grid-columns - 1) {
        // Avoid emitting useless
        @if not ($_breakpoint == 'xs' and $_size == 0) {
          .ngx-GridComponent__GridColumnComponent_offset_#{$_breakpoint}-#{$_size} {
            @include ngx-grid-column-modifier(offset, $_size);
          }
        }
      }
    }
  }
}

