// $target: Is html element or class of component
// $states: Is a array which is combined from states 'self', 'disabled', 'focus', 'hover', 'active', 'visisted', 'ng-invalid', 'ng-touched'
// $exclude: Is a array which contains classes of target which make state cannot apply to target
//
// Example:
// .my-component {
//   @include ngx-state('.my-component', ('hover', 'active'), ('disabled')) {
//     color: #ff6d00;
//   }
// }
//
// It will be compiled to:
// .my-component:hover:not(.my-component_state_disabled),
// .my-component_state_active:not(.my-component_state_disabled),{
//   color: #ff6d00;
// }
@mixin ngx-state($prefix-class, $states, $exclude: null) {
  $_properties: '';

  @if index($states, self) {
    @if $exclude {
      @each $_value in $exclude {
        $_properties: $_properties + '&:not(#{$prefix-class}_state_#{$_value}),';
      }
    }
    @else {
      $_properties: $_properties + '&,';
    }
  }

  @if index($states, focus) {
    @if $exclude {
      @each $_value in $exclude {
        $_properties: $_properties + '&:focus:not(#{$prefix-class}_state_#{$_value}),';
      }
    }
    @else {
      $_properties: $_properties + '&:focus,';
    }
  }

  @if index($states, hover) {
    @if $exclude {
      @each $_value in $exclude {
        $_properties: $_properties + '&:hover:not(#{$prefix-class}_state_#{$_value}),';
      }
    }
    @else {
      $_properties: $_properties + '&:hover,';
    }
  }

  @if index($states, visited) {
    @if $exclude {
      @each $_value in $exclude {
        $_properties: $_properties + '&:visited:not(#{$prefix-class}_state_#{$_value}),';
      }
    }
    @else {
      $_properties: $_properties + '&:visited,';
    }
  }

  @if index($states, active) {
    @if $exclude {
      @each $_value in $exclude {
        $_properties: $_properties + '&#{$prefix-class}_state_active:not(#{$prefix-class}_state_#{$_value}),';
      }
    }
    @else {
      $_properties: $_properties + '&#{$prefix-class}_state_active,';
    }
  }

  @if index($states, disabled) {
    @if $exclude {
      @each $_value in $exclude {
        $_properties: $_properties + '&#{$prefix-class}_state_disabled:not(#{$prefix-class}_state_#{$_value}),';
      }
    }
    @else {
      $_properties: $_properties + '&#{$prefix-class}_state_disabled,';
    }
  }

  @if index($states, ng-invalid) {
    @if $exclude {
      @each $_value in $exclude {
        $_properties: $_properties + '&.ng-invalid:not(#{$prefix-class}_state_#{$_value}),';
      }
    }
    @else {
      $_properties: $_properties + '&.ng-invalid,';
    }
  }

  @if index($states, ng-touched) {
    @if $exclude {
      @each $_value in $exclude {
        $_properties: $_properties + '&.ng-touched:not(#{$prefix-class}_state_#{$_value}),';
      }
    }
    @else {
      $_properties: $_properties + '&.ng-touched,';
    }
  }

  @if str-length($_properties) > 0 {
    $_properties: str_slice($_properties, 1, str-length($_properties) - 1);

    #{$_properties} {
      @content;
    }
  }
}
