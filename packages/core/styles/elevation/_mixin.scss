// Applies the correct css rules to an element to give it the elevation specified by $value.
// The $value must be between 0 and 24.
@mixin ngx-elevation(
    $value,
    $umbra-map: $ngx-elevation-umbra-map,
    $penumbra-map: $ngx-elevation-penumbra-map,
    $ambient-map: $ngx-elevation-ambient-map) {
  @if type-of($value) != number or not unitless($value) {
    @error '$value must be a unitless number';
  }
  @if $value < 0 or $value > 24 {
    @error '$value must be between 0 and 24';
  }

  box-shadow: #{map-get($umbra-map, $value)},
                             #{map-get($penumbra-map, $value)},
                             #{map-get($ambient-map, $value)};
}

// Applies the correct css rules needed to have an element transition between elevations.
// This mixin should be applied to elements whose elevation values will change depending on their
// context (e.g. when active or disabled).
//
// NOTE(traviskaufman): Both this mixin and the @function ngx-elevation-transition-property-value
// use default parameters so they can be used in the same way by clients.
@mixin ngx-elevation-transition(
    $duration: $ngx-elevation-transition-duration,
    $easing: $ngx-elevation-transition-timing-function) {
  transition: ngx-elevation-transition-property-value($duration, $easing);
  will-change: box-shadow;
}
