// Creates a map of hues to colors for a theme. This is used to define a theme palette in terms
// of the Material Design hues.
// @param $color-map
// @param $primary
// @param $lighter
@function ngx-palette($base-palette, $default: 500, $lighter: 100, $darker: 700) {
  $result: map_merge($base-palette, (
    default: map-get($base-palette, $default),
    lighter: map-get($base-palette, $lighter),
    darker: map-get($base-palette, $darker),

    default-contrast: ngx-color-contrast($base-palette, $default),
    lighter-contrast: ngx-color-contrast($base-palette, $lighter),
    darker-contrast: ngx-color-contrast($base-palette, $darker)
  ));

  // For each hue in the palette, add a "-contrast" color to the map.
  @each $hue, $color in $base-palette {
    $result: map_merge($result, (
      '#{$hue}-contrast': ngx-color-contrast($base-palette, $hue)
    ));
  }

  @return $result;
}

// Creates a container object for a light theme to be given to individual component theme mixins.
@function ngx-light-theme($primary, $accent, $warn: ngx-palette($ngx-palette-red)) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: false,
    foreground: $ngx-light-theme-foreground,
    background: $ngx-light-theme-background,
  );
}


// Creates a container object for a dark theme to be given to individual component theme mixins.
@function ngx-dark-theme($primary, $accent, $warn: ngx-palette($ngx-palette-red)) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: true,
    foreground: $ngx-dark-theme-foreground,
    background: $ngx-dark-theme-background,
  );
}
