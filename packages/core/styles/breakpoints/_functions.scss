@import './_variables.scss';

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 480px, md: 600px)
//
// The map defined in the `$ngx-grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> ngx-breakpoint-next(sm)
//    md
//    >> ngx-breakpoint-next(sm, (xs: 0, sm: 480px, md: 600px))
//    md
//    >> ngx-breakpoint-next(sm, $breakpoint-names: (xs sm md))
//    md
@function ngx-breakpoint-next($name, $breakpoints: $ngx-grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> ngx-breakpoint-min(sm, (xs: 0, sm: 480px, md: 600px))
//    480px
@function ngx-breakpoint-min($name, $breakpoints: $ngx-grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> ngx-breakpoint-max(sm, (xs: 0, sm: 480px, md: 600px))
//    600px
@function ngx-breakpoint-max($name, $breakpoints: $ngx-grid-breakpoints) {
  $next: ngx-breakpoint-next($name, $breakpoints);
  @return if($next, ngx-breakpoint-min($next, $breakpoints) - 1px, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin ngx-media-breakpoint-up($name, $breakpoints: $ngx-grid-breakpoints) {
  $min: ngx-breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}
